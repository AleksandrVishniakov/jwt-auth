// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const createSuperUser = `-- name: CreateSuperUser :one
INSERT INTO users (login, password_hash, role_id)
VALUES (
    $1, 
    $2, 
    (SELECT id FROM roles WHERE is_super = true LIMIT 1)
)
RETURNING id
`

type CreateSuperUserParams struct {
	Login        string
	PasswordHash string
}

func (q *Queries) CreateSuperUser(ctx context.Context, arg CreateSuperUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createSuperUser, arg.Login, arg.PasswordHash)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (login, password_hash, role_id)
VALUES (
    $1, 
    $2, 
    (SELECT id FROM roles WHERE is_default = true LIMIT 1)
)
RETURNING id
`

type CreateUserParams struct {
	Login        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Login, arg.PasswordHash)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getRoleByAlias = `-- name: GetRoleByAlias :one
SELECT id, alias, is_default, is_super, permissions_mask FROM roles
WHERE roles.alias = $1
`

func (q *Queries) GetRoleByAlias(ctx context.Context, alias string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByAlias, alias)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Alias,
		&i.IsDefault,
		&i.IsSuper,
		&i.PermissionsMask,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT u.id, u.login, u.role_id, u.password_hash, u.created_at, r.alias, r.permissions_mask
FROM users u JOIN roles r
ON u.role_id = r.id
WHERE u.id = $1
`

type GetUserByIdRow struct {
	ID              int32
	Login           string
	RoleID          int32
	PasswordHash    string
	CreatedAt       time.Time
	Alias           string
	PermissionsMask int64
}

func (q *Queries) GetUserById(ctx context.Context, id int32) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.RoleID,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.Alias,
		&i.PermissionsMask,
	)
	return i, err
}

const getUserByLogin = `-- name: GetUserByLogin :one
SELECT u.id, u.login, u.role_id, u.password_hash, u.created_at, r.alias, r.permissions_mask
FROM users u JOIN roles r
ON u.role_id = r.id
WHERE u.login = $1
`

type GetUserByLoginRow struct {
	ID              int32
	Login           string
	RoleID          int32
	PasswordHash    string
	CreatedAt       time.Time
	Alias           string
	PermissionsMask int64
}

func (q *Queries) GetUserByLogin(ctx context.Context, login string) (GetUserByLoginRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByLogin, login)
	var i GetUserByLoginRow
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.RoleID,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.Alias,
		&i.PermissionsMask,
	)
	return i, err
}

const updateRoleById = `-- name: UpdateRoleById :exec
UPDATE users
SET role_id = (SELECT roles.id FROM roles WHERE roles.alias = $2 LIMIT 1)
WHERE users.id = $1
`

type UpdateRoleByIdParams struct {
	ID    int32
	Alias string
}

func (q *Queries) UpdateRoleById(ctx context.Context, arg UpdateRoleByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateRoleById, arg.ID, arg.Alias)
	return err
}

const upsertRole = `-- name: UpsertRole :one
INSERT INTO roles (alias, is_default, is_super, permissions_mask)
VALUES ($1, $2, $3, $4)
ON CONFLICT (alias) 
DO UPDATE SET 
    is_default = EXCLUDED.is_default,
    is_super = EXCLUDED.is_super,
    permissions_mask = EXCLUDED.permissions_mask
RETURNING id
`

type UpsertRoleParams struct {
	Alias           string
	IsDefault       bool
	IsSuper         bool
	PermissionsMask int64
}

func (q *Queries) UpsertRole(ctx context.Context, arg UpsertRoleParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, upsertRole,
		arg.Alias,
		arg.IsDefault,
		arg.IsSuper,
		arg.PermissionsMask,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
